// Code generated by MockGen. DO NOT EDIT.
// Source: ./register/types.go

// Package registermock is a generated GoMock package.
package registermock

import (
	context "context"
	reflect "reflect"

	register "github.com/KNICEX/grpc-start/register"
	gomock "github.com/golang/mock/gomock"
)

// MockRegister is a mock of Register interface.
type MockRegister struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterMockRecorder
}

// MockRegisterMockRecorder is the mock recorder for MockRegister.
type MockRegisterMockRecorder struct {
	mock *MockRegister
}

// NewMockRegister creates a new mock instance.
func NewMockRegister(ctrl *gomock.Controller) *MockRegister {
	mock := &MockRegister{ctrl: ctrl}
	mock.recorder = &MockRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegister) EXPECT() *MockRegisterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRegister) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRegisterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRegister)(nil).Close))
}

// ListService mocks base method.
func (m *MockRegister) ListService(ctx context.Context, serviceName string) ([]register.ServiceInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListService", ctx, serviceName)
	ret0, _ := ret[0].([]register.ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListService indicates an expected call of ListService.
func (mr *MockRegisterMockRecorder) ListService(ctx, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListService", reflect.TypeOf((*MockRegister)(nil).ListService), ctx, serviceName)
}

// Register mocks base method.
func (m *MockRegister) Register(ctx context.Context, ins register.ServiceInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, ins)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegisterMockRecorder) Register(ctx, ins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegister)(nil).Register), ctx, ins)
}

// Subscribe mocks base method.
func (m *MockRegister) Subscribe(serviceName string) (<-chan register.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", serviceName)
	ret0, _ := ret[0].(<-chan register.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockRegisterMockRecorder) Subscribe(serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockRegister)(nil).Subscribe), serviceName)
}

// Unregister mocks base method.
func (m *MockRegister) Unregister(ctx context.Context, ins register.ServiceInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", ctx, ins)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister.
func (mr *MockRegisterMockRecorder) Unregister(ctx, ins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockRegister)(nil).Unregister), ctx, ins)
}
